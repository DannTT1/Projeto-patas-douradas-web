-- LOCALSTORAGE --
O localStorage √© um recurso do navegador que permite armazenar dados no computador do usu√°rio, como se fosse um pequeno banco de dados persistente no pr√≥prio navegador.

Os dados n√£o se perdem ao recarregar ou fechar a aba.

E eles s√£o armazenados como pares chave-valor (strings).

Exemplo:
localStorage.setItem('nome', 'Maria');
const nome = localStorage.getItem('nome'); // 'Maria'

LEMBRE-SE: 
- O localStorage s√≥ armazena strings, ent√£o quando voc√™ salva um objeto ou array nele, voc√™ precisa converter para string com JSON.stringify() e, ao recuperar, precisa converter de volta para objeto com JSON.parse().

COMANDOS PRINCIPAIS DO LOCALSTORAGE:

| Fun√ß√£o                   | Descri√ß√£o                       |
| ------------------------ | ------------------------------- |
| `localStorage.getItem()` | L√™ uma string do armazenamento. |
| `localStorage.setItem()` | Armazena uma string.            |
| `JSON.stringify()`       | Converte um objeto em string.   |
| `JSON.parse()`           | Converte uma string em objeto.  |



----- JSON em JavaScript -----
JSON √© um objeto embutido (nativo) do JavaScript usado para trabalhar com dados no formato JSON (JavaScript Object Notation) ‚Äî um formato leve e amplamente utilizado para troca de dados entre sistemas.

ele possui dois m√©todos principais:

- JSON.stringify() que √© utilizado para converter objetos em strings JSON
üìå Usado, por exemplo, para salvar objetos no localStorage, que s√≥ aceita strings.

// exemplo 
const obj = { nome: "Jo√£o", idade: 25 };
const jsonString = JSON.stringify(obj);
console.log(jsonString); // {"nome":"Jo√£o","idade":25}


- JSON.parse() que √© utilizado para converter uma String JSON em um objeto JavaScript
üìå Usado para ler dados do localStorage
// exemplo
const jsonString = '{"nome":"Jo√£o","idade":25}';
const obj = JSON.parse(jsonString);
console.log(obj.nome); // Jo√£o

RESUMO: 
| A√ß√£o                 | M√©todo             | Exemplo                         |
| -------------------- | ------------------ | ------------------------------- |
| Objeto ‚Üí String JSON | `JSON.stringify()` | `JSON.stringify({nome: "Ana"})` |
| String JSON ‚Üí Objeto | `JSON.parse()`     | `JSON.parse('{"nome":"Ana"}')`  |

Utilizamos o objeto JSON com o localStorage sempre que armazenar ou ler algo

-- Auth.js ---
O auth.js √© responsavel pela autentica√ß√£o dos nossos usuarios no projeto atraves do localStorage

As constantes abaixo servem para definir os usuarios, e o usuario logado no momento 

- const USUARIO_LOGADO = 'usuario_logado';
- const USUARIOS = 'usuarios';

Temos a fun√ß√£o login 
// Fun√ß√£o de login
function login(email, senha, tipo) {
    const usuarios = JSON.parse(localStorage.getItem(USUARIOS)) || [];

    const usuario = usuarios.find(
        u => u.email === email && u.senha === senha && u.tipo === tipo
    );

    if (usuario) {
        localStorage.setItem(USUARIO_LOGADO, JSON.stringify(usuario));
        return true;
    }

    return false;
}

Essa fun√ß√£o trabalha da seguinte forma: 
1 - primeiro ela busca todos os usuarios que est√£o cadastrados no localStorage convertendo de String, para Objeto 
// auth.js - linha 6
const usuarios = JSON.parse(localStorage.getItem(USUARIOS)) || [];

2 - procura um usuario que tenha os mesmos dados passados (email, senha e tipo)
// auth - linha 6
const usuario = usuarios.find(
    u => u.email === email && u.senha === senha && u.tipo === tipo
);

3 - se encontrar armazena em usuario_logado no localStorage

localStorage.setItem(USUARIO_LOGADO, JSON.stringify(usuario));

4 - retorna true para dizer que o login foi bem sucedido, ou false caso nao seja 

FUN√á√ÉO usuarioLogado()

// auth.js - linha 20
function usuarioLogado() {
    return JSON.parse(localStorage.getItem(USUARIO_LOGADO));
}

- Essa fun√ß√£o verifica o usuario logado atualmente
- retorna o objeto do usuario que est√° logado, ou null caso nao tenha ninguem logado


FUN√á√ÉO logout()
// auth.js - linha 26
function logout() {
    localStorage.removeItem(USUARIO_LOGADO);
}
- fun√ß√£o que remove o usuario logado do localStorage (essa fun√ß√£o aparece nos headers ao clicar em "sair")


FUN√á√ÉO protegerLogin()
// auth.js - linha 30
function protegerLogin() {
    if (!usuarioLogado()) {
        alert("Voc√™ precisa estar logado");
        window.location.href = '../../cadastro/login.html';
    }
}

- Essa fun√ßao verifica se possui um usuario logado, caso nao tenha ela abre um popup 
notificando que o usario deve estar logado e redireciona para a pagina de login

FUN√á√ÉO cadastrarUsuario()
// auth.js - linha 40 
function cadastrarUsuario(novoUsuario) {
    // Busca no localStorage a lista de usu√°rios cadastrados.
    // Se n√£o existir ainda, usa um array vazio como valor padr√£o.
    const usuarios = JSON.parse(localStorage.getItem(USUARIOS)) || [];

    // Adiciona o novo usu√°rio ao array de usu√°rios.
    usuarios.push(novoUsuario); // <<< ESSENCIAL: aqui que o novo usu√°rio entra no sistema

    // Atualiza o localStorage com a nova lista de usu√°rios (convertida em string JSON).
    localStorage.setItem(USUARIOS, JSON.stringify(usuarios));
}

- Essa fun√ß√£o pega o usuario recem preenchido no formulario, adicionando ele a lista de 
usuarios no localStorage.

FUN√á√ÉO erificadorDeEmailExistente()

function verificadorDeEmailExistente(email) {
    // Busca todos os usu√°rios salvos no localStorage.
    const usuarios = JSON.parse(localStorage.getItem(USUARIOS)) || [];

    // Verifica se j√° existe algum usu√°rio com o mesmo e-mail.
    // Retorna true se encontrar, false se n√£o encontrar.
    return usuarios.some(usuario => usuario.email === email);
}

- Essa fun√ß√£o barra qualquer tentativa de cadastro com o mesmo email
- retornando true se achar, ou false se nao encontrar, deixando o usuario cadastrar  caso
nao esteja cadastrando email duplicado



---- Cadastro.js ----
- trabalaha puxando o formulario do cadastro.html
// cadastro.js - linha 1
document.getElementById("formularioCadastro").addEventListener("submit", function (e) {
    e.preventDefault();

- aqui ocorre um evento assim que o botao de submit do cadastro.html √© usado

√â criado 4 variaveis const
// cadastro.js - linha 4 a linha 7
    const nomeCompleto = document.getElementById("nomeUsuario").value;
    const email = document.getElementById("emailUsuario").value;
    const senha = document.getElementById("senhaUsuario").value;
    const tipoUsuario = document.querySelector("input[name='opcaoLoginCadastro']:checked").value;

// cadastro.js - linha - 9 a linha 12
    if(verificadorDeEmailExistente(email)) {
        alert('Email j√° cadastrado,fa√ßa o login utilizando outro e-mail');
        return;
    }   

- Estamos chamando a fun√ß√£o verificadorDeEmailExistente() do nosso auth.js
- aplica a condi√ß√£o if se caso o email ja est√° cadastrado no site informa um popup ao usuario
nao permitindo ele cadastrar com esse email e pedindo para cadastrar com outro email


---- carrinho.js ------
FUN√á√ÉO obterCarrinho()

// carrinho.js - linha 1 a 3
function obterCarrinho() {
  return JSON.parse(localStorage.getItem("carrinho")) || [];
}
- Aqui recuperamos o conte√∫do do carrinho que fica armazenado no localStorage
- lembrando: Como o localStorage armazena s√≥ texto, ele faz o parse do JSON para transformar 
em array de objetos.
- Se n√£o houver nada armazenado (retorna null), um array vazio [].

FUN√á√ÉO salvarCarrinho()

// carrinho.js - linha 5 a 7
function salvarCarrinho(carrinho) {
  localStorage.setItem("carrinho", JSON.stringify(carrinho));
}

- Essa fun√ßao recebe um array carrinho e salva no locaStorage(assim como os carrinhos de
outros e-commerces o carrinho do usuario geralmente salva os produtos deixados l√°)

FUN√á√ÉO listarCarrinho()
// carrinho.js - linha 9 a 34
function listarCarrinho() {
  const carrinho = obterCarrinho();
  const container = document.getElementById("itens-carrinho");
  const totalSpan = document.getElementById("total");
  container.innerHTML = "";

  if (carrinho.length === 0) {
    container.innerHTML = "<p>O carrinho est√° vazio.</p>";
    totalSpan.textContent = "";
    return;
  }

  let total = 0;
  carrinho.forEach((item, index) => {
    total += item.preco;
    const div = document.createElement("div");
    div.className = "item-carrinho";
    div.innerHTML = `
      <p><strong>${item.nome}</strong> - R$ ${item.preco.toFixed(2)}</p>
      <button onclick="removerItem(${index})">Remover</button>
    `;
    container.appendChild(div);
  });

  totalSpan.textContent = `Total: R$ ${total.toFixed(2)}`;
}

- Ela busca o carrinho atual fazendo uma variavel const que recebe a fun√ßao obterCarrinho()
// carrinho.js - linha 10
 const carrinho = obterCarrinho();

- Se o carrinho estiver vazio, mostra a mensagem "O carrinho est√° vazio." e limpa o total.
// carrinho.js - linha 15 a 19
  if (carrinho.length === 0) {
    container.innerHTML = "<p>O carrinho est√° vazio.</p>";
    totalSpan.textContent = "";
    return;
  }

- se o carrinho possuir itens 
// carrinho.js - linha 21 a 34
let total = 0;
  carrinho.forEach((item, index) => {
    total += item.preco;
    const div = document.createElement("div");
    div.className = "item-carrinho";
    div.innerHTML = `
      <p><strong>${item.nome}</strong> - R$ ${item.preco.toFixed(2)}</p>
      <button onclick="removerItem(${index})">Remover</button>
    `;
    container.appendChild(div);
  });

  totalSpan.textContent = `Total: R$ ${total.toFixed(2)}`;

- itera sobre os produtos e soma os pre√ßos para calcular o total.

- Para cada produto, cria um div com o nome, pre√ßo formatado e um bot√£o "Remover" que chama a fun√ß√£o removerItem(index) para remover o produto pelo √≠ndice se quiser.

- Atualiza o total mostrado no elemento com id "total".  


FUN√á√ÉO removerItem() 

// carrinho.js - linha 36 a 41
function removerItem(index) {
  const carrinho = obterCarrinho();
  carrinho.splice(index, 1);
  salvarCarrinho(carrinho);
  listarCarrinho();
}

- Ela remove o item na posi√ß√£o index do array do carrinho.
- atualiza e salva o carrinho atualizado no localStorage.
- Atualiza a lista exibida chamando listarCarrinho() novamente.


FUN√á√ÉO finalizarPedido()

// carrinho.js - linha
function finalizarPedido() {
  const carrinho = obterCarrinho();
  if (carrinho.length === 0) {
    alert("Seu carrinho est√° vazio!");
    return;
  }

  const usuarioLogado = JSON.parse(localStorage.getItem("usuario_logado"));
  if (!usuarioLogado) {
    alert("Erro: voc√™ precisa estar logado para finalizar o pedido.");
    return;
  }

  const produtos = JSON.parse(localStorage.getItem("produtosDisponiveis")) || [];

  carrinho.forEach(itemCarrinho => {
    const produtoIndex = produtos.findIndex(p => p.id === itemCarrinho.id);
    if (produtoIndex !== -1) {
      produtos[produtoIndex].estoque = Math.max(0, produtos[produtoIndex].estoque - 1);
    }
  });

  localStorage.setItem("produtosDisponiveis", JSON.stringify(produtos));

  const pedidos = JSON.parse(localStorage.getItem("pedidos")) || [];

  const novoPedido = {
    id: Date.now(),
    data: Date.now(),
    cliente: usuarioLogado, // Salva o usu√°rio logado junto com o pedido
    itens: carrinho,
    total: carrinho.reduce((acc, item) => acc + item.preco, 0)
  };

  pedidos.push(novoPedido);
  localStorage.setItem("pedidos", JSON.stringify(pedidos));
  localStorage.removeItem("carrinho");

  alert("Pedido finalizado com sucesso!");
  window.location.href = "pedidos-cliente.html";
}

- Essa fun√ß√£o faz muitas coisas:
1 - Ela verifica se o carrinho est√° vazio
2 - Verifica se tem um usuario logado(pegando do localStorage em "usuario_logado", se n√£o tiver ele alerta erro e sai).
3 - recupera a lista de produtos dispon√≠veis.
4 - para cada produto dentro do carrinho, ele localiza esse produto e diminui o estoque, garantindo que nao h√° erros de logina na contabilidade dos produtos em estoque.
5 - atualiza a lista de produtos no localStorage.
6 - recupera a lista de pedidos ja salvos
7 - Cria um objeto novoPedido com: 
  - um id unico(timestamp)
  - data atual (timestamp)
  - o usuario logado como cliente
  - os itens do carrinho 
  - total do pedido somando os precos dos itens
8 - Adiciona o novo pedido na lista de pedidos e salva no localStorage.
9 - Limpa o carrinho (remove a chave "carrinho").
10 - Exibe um alerta de sucesso.
11 - Redireciona para a p√°gina "pedidos-cliente.html".


FUN√á√ÉO voltar()
// carrinho.js - linha  85 a 87
function voltar() {
  window.location.href = "produtos-lista.html";
}

- redireciona o usu√°rio para a pagina de produtos

document.addEventListener("DOMContentLoaded", listarCarrinho);
- garante que o HTML vai carregar primeiro