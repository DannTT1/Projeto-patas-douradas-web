-- LOCALSTORAGE --
O localStorage √© um recurso do navegador que permite armazenar dados no computador do usu√°rio, como se fosse um pequeno banco de dados persistente no pr√≥prio navegador.

Os dados n√£o se perdem ao recarregar ou fechar a aba.

E eles s√£o armazenados como pares chave-valor (strings).

Exemplo:
localStorage.setItem('nome', 'Maria');
const nome = localStorage.getItem('nome'); // 'Maria'

LEMBRE-SE: 
- O localStorage s√≥ armazena strings, ent√£o quando voc√™ salva um objeto ou array nele, voc√™ precisa converter para string com JSON.stringify() e, ao recuperar, precisa converter de volta para objeto com JSON.parse().

COMANDOS PRINCIPAIS DO LOCALSTORAGE:

| Fun√ß√£o                   | Descri√ß√£o                       |
| ------------------------ | ------------------------------- |
| `localStorage.getItem()` | L√™ uma string do armazenamento. |
| `localStorage.setItem()` | Armazena uma string.            |
| `JSON.stringify()`       | Converte um objeto em string.   |
| `JSON.parse()`           | Converte uma string em objeto.  |



----- JSON em JavaScript -----
JSON √© um objeto embutido (nativo) do JavaScript usado para trabalhar com dados no formato JSON (JavaScript Object Notation) ‚Äî um formato leve e amplamente utilizado para troca de dados entre sistemas.

ele possui dois m√©todos principais:

- JSON.stringify() que √© utilizado para converter objetos em strings JSON
üìå Usado, por exemplo, para salvar objetos no localStorage, que s√≥ aceita strings.

// exemplo 
const obj = { nome: "Jo√£o", idade: 25 };
const jsonString = JSON.stringify(obj);
console.log(jsonString); // {"nome":"Jo√£o","idade":25}


- JSON.parse() que √© utilizado para converter uma String JSON em um objeto JavaScript
üìå Usado para ler dados do localStorage
// exemplo
const jsonString = '{"nome":"Jo√£o","idade":25}';
const obj = JSON.parse(jsonString);
console.log(obj.nome); // Jo√£o

RESUMO: 
| A√ß√£o                 | M√©todo             | Exemplo                         |
| -------------------- | ------------------ | ------------------------------- |
| Objeto ‚Üí String JSON | `JSON.stringify()` | `JSON.stringify({nome: "Ana"})` |
| String JSON ‚Üí Objeto | `JSON.parse()`     | `JSON.parse('{"nome":"Ana"}')`  |

Utilizamos o objeto JSON com o localStorage sempre que armazenar ou ler algo

-- Auth.js ---
O auth.js √© responsavel pela autentica√ß√£o dos nossos usuarios no projeto atraves do localStorage

As constantes abaixo servem para definir os usuarios, e o usuario logado no momento 

- const USUARIO_LOGADO = 'usuario_logado';
- const USUARIOS = 'usuarios';

Temos a fun√ß√£o login 
// Fun√ß√£o de login
function login(email, senha, tipo) {
    const usuarios = JSON.parse(localStorage.getItem(USUARIOS)) || [];

    const usuario = usuarios.find(
        u => u.email === email && u.senha === senha && u.tipo === tipo
    );

    if (usuario) {
        localStorage.setItem(USUARIO_LOGADO, JSON.stringify(usuario));
        return true;
    }

    return false;
}

Essa fun√ß√£o trabalha da seguinte forma: 
1 - primeiro ela busca todos os usuarios que est√£o cadastrados no localStorage convertendo de String, para Objeto 
// auth.js - linha 6
const usuarios = JSON.parse(localStorage.getItem(USUARIOS)) || [];

2 - procura um usuario que tenha os mesmos dados passados (email, senha e tipo)
// auth - linha 6
const usuario = usuarios.find(
    u => u.email === email && u.senha === senha && u.tipo === tipo
);

3 - se encontrar armazena em usuario_logado no localStorage

localStorage.setItem(USUARIO_LOGADO, JSON.stringify(usuario));

4 - retorna true para dizer que o login foi bem sucedido, ou false caso nao seja 

FUN√á√ÉO usuarioLogado()

// auth.js - linha 20
function usuarioLogado() {
    return JSON.parse(localStorage.getItem(USUARIO_LOGADO));
}

- Essa fun√ß√£o verifica o usuario logado atualmente
- retorna o objeto do usuario que est√° logado, ou null caso nao tenha ninguem logado


FUN√á√ÉO logout()
// auth.js - linha 26
function logout() {
    localStorage.removeItem(USUARIO_LOGADO);
}
- fun√ß√£o que remove o usuario logado do localStorage (essa fun√ß√£o aparece nos headers ao clicar em "sair")


FUN√á√ÉO protegerLogin()
// auth.js - linha 30
function protegerLogin() {
    if (!usuarioLogado()) {
        alert("Voc√™ precisa estar logado");
        window.location.href = '../../cadastro/login.html';
    }
}

- Essa fun√ßao verifica se possui um usuario logado, caso nao tenha ela abre um popup 
notificando que o usario deve estar logado e redireciona para a pagina de login

FUN√á√ÉO cadastrarUsuario()
// auth.js - linha 40 
function cadastrarUsuario(novoUsuario) {
    // Busca no localStorage a lista de usu√°rios cadastrados.
    // Se n√£o existir ainda, usa um array vazio como valor padr√£o.
    const usuarios = JSON.parse(localStorage.getItem(USUARIOS)) || [];

    // Adiciona o novo usu√°rio ao array de usu√°rios.
    usuarios.push(novoUsuario); // <<< ESSENCIAL: aqui que o novo usu√°rio entra no sistema

    // Atualiza o localStorage com a nova lista de usu√°rios (convertida em string JSON).
    localStorage.setItem(USUARIOS, JSON.stringify(usuarios));
}

- Essa fun√ß√£o pega o usuario recem preenchido no formulario, adicionando ele a lista de 
usuarios no localStorage.

FUN√á√ÉO erificadorDeEmailExistente()

function verificadorDeEmailExistente(email) {
    // Busca todos os usu√°rios salvos no localStorage.
    const usuarios = JSON.parse(localStorage.getItem(USUARIOS)) || [];

    // Verifica se j√° existe algum usu√°rio com o mesmo e-mail.
    // Retorna true se encontrar, false se n√£o encontrar.
    return usuarios.some(usuario => usuario.email === email);
}

- Essa fun√ß√£o barra qualquer tentativa de cadastro com o mesmo email
- retornando true se achar, ou false se nao encontrar, deixando o usuario cadastrar  caso
nao esteja cadastrando email duplicado